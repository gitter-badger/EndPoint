    <#
    .SYNOPSIS
        Script Generator for Configuration Scripts

    .DESCRIPTION
        Generates a script to be used to secure a custom Powershell Endpoint

    .PARAMETER Cmdlet
        Cmdlets that you would like to be available on the endpoint

    .PARAMETER Application
        Applications that you would like to be available on the endpoint
    
    .PARAMETER Alias
        Alias that you would like to be available on the endpoint
    
    .PARAMETER Script
        Scripts that you would like to be available on the endpoint
    
    .PARAMETER Path
        Output path where the script will be written
#>
Function New-ConfigurationScript{
    [CmdletBinding()]
    param(
        [string[]]
        $Cmdlet,
        
        [string[]]
        $Application,
        
        [string[]]
        $Alias,
        
        [string[]]
        $Script,    
        
        [string]
        $Path = "./"    
    )
    
    $Date = Get-Date
    $functionName = $MyInvocation.MyCommand
    #need to add single quotes around each item
    
    #convert Cmdlets 
    $PublicCmdlet = @()
    $Cmdlet | foreach{Write-Verbose "Adding quotes to $_";$PublicCmdlet += "'$_'"}
    $PublicCmdlet | Foreach{Write-Verbose $_}
    $PublicCmdlet = $PublicCmdlet -join ','
    
    #convert Applications
    $PublicApplications = @()
    $Application | foreach{Write-Verbose "Adding quotes to $_";$PublicApplications += "'$_'"}
    $PublicApplications | ForEach{Write-Verbose $_}
    $PublicApplications = $PublicApplications -join ','
    
    #convert Alias
    $PublicAlias = @()
    $Alias | ForEach{Write-Verbose "Adding quotes to $_"; $PublicAlias += "'$_'"}
    $PublicAlias | Foreach{Write-Verbose $_}
    $PublicAlias = $PublicAlias -join ','

    #convert Scripts
    $PublicScripts = @()
    $Script | ForEach{Write-Verbose "Adding quotes to $_"; $PublicScripts += "'$_'"}
    $PublicScripts | ForEach{Write-Verbose $_}
    $PublicScripts = $PublicScripts -join ','

    $content = @"
<#
    .SYNOPSIS
        Configuration Script

    .DESCRIPTION
        Configuration Script used to apply to a custom Powershell Endpoint
        This Script enables:
            Cmdlets - $PublicCmdlet
            Applications - $PublicApplications
            Aliases - $PublicAlias
            Scripts - $PublicScripts

    .NOTES
        This Script was autogenerated with $functionName
         by: $env:UserName
         on: $Date

         To re-create this use the EndPoint Module and call $functionName
       
             
#>
[string[]]`$Application = $PublicApplications
[string[]]`$PublicCmdlets = $PublicCmdlet
[string[]]`$PublicAliases = $PublicAlias
[string[]]`$PublicScripts = $PublicScripts

[string[]]`$PublicApps = Foreach(`$app in `$Application){
    Get-Command `$app | select -ExpandProperty Definition
}

Get-Command | ForEach {
    If (`$PublicCmdlets -notcontains `$_.Name) {`$_.Visibility = 'Private'}
}

Get-Alias | ForEach {
    If ($`PublicAliases -notcontains `$_.Name) {`$_.Visibility = 'Private'}
}

`$ExecutionContext.SessionState.Applications.Clear()
`$ExecutionContext.SessionState.Scripts.Clear()

If (`$PublicApps) {
    `$ExecutionContext.SessionState.Applications.AddRange(`
    (`$PublicApps -as [System.Collections.Generic.IEnumerable[string]]))
}

If (`$PublicScripts) {
    `$ExecutionContext.SessionState.Scripts.AddRange(`
    (`$PublicScripts -as [System.Collections.Generic.IEnumerable[string]]))
}

`$ExecutionContext.SessionState.LanguageMode = "NoLanguage"

`$SessionStateType = [System.Management.Automation.Runspaces.InitialSessionState]
`$SessionState = `$SessionStateType::CreateRestricted("RemoteServer")

`$proxyfunctions = `$SessionState.Commands | Where {`$_.CommandType -eq 'Function'}
`$proxyfunctions | ForEach {Set-Item "Function:\`$(`$_.Name)" `$_.Definition}
            
"@
    Write-Verbose $content
    Set-Content -Value $content -Path $Path
        
}